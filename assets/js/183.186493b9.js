(window.webpackJsonp=window.webpackJsonp||[]).push([[183],{608:function(t,s,a){"use strict";a.r(s);var e=a(28),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"前置知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前置知识"}},[t._v("#")]),t._v(" 前置知识")]),t._v(" "),a("blockquote",[a("p",[t._v("今日 【extreme - 5.getReadOnlyKeys】")])]),t._v(" "),a("p",[t._v("在这之前需要掌握一点Ts基础知识，可以参考学习记录"),a("RouterLink",{attrs:{to:"/Web/TypeScript/typescript1.html"}},[t._v("TypeScript学习记录-[数据类型]")]),t._v("、"),a("RouterLink",{attrs:{to:"/Web/TypeScript/typescript1.html"}},[t._v("TypeScript学习记录-[类和接口]")]),t._v("、"),a("RouterLink",{attrs:{to:"/Web/TypeScript/typescript1.html"}},[t._v("TypeScript学习记录-[枚举和泛型]")]),t._v("、"),a("RouterLink",{attrs:{to:"/Web/TypeScript/typescript1.html"}},[t._v("TypeScript学习记录-[类型别名]")])],1),t._v(" "),a("h1",{attrs:{id:"二、题目分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、题目分析"}},[t._v("#")]),t._v(" 二、题目分析")]),t._v(" "),a("h2",{attrs:{id:"get-readonly-keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-readonly-keys"}},[t._v("#")]),t._v(" get-readonly-keys")]),t._v(" "),a("p",[a("strong",[t._v("实现泛型GetReadonlyKeys"),a("T",[t._v("，该GetReadonlyKeys"),a("T",[t._v("返回对象的只读键的并集。")])],1)],1)]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("type GetReadonlyKeys"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" any\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* _____________ Test Cases _____________ */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" type "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Equal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Expect "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@type-challenges/utils'")]),t._v("\n\ntype cases "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  Expect"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Equal"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'title'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GetReadonlyKeys"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Todo1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Expect"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Equal"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'title'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'description'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GetReadonlyKeys"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Todo2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Todo1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  readonly title"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("description")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("completed")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" boolean\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Todo2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  readonly title"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n  readonly description"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n  completed"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" boolean\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("首先可以确定的是返回类型是联合类型，类型值是泛型 "),a("code",[t._v("T")]),t._v(" 中被 "),a("code",[t._v("readonly")]),t._v(" 修饰的索引键名")]),t._v(" "),a("li",[t._v("为了挑选出符合条件的键需要对泛型 "),a("code",[t._v("T")]),t._v(" 的每一项进行比较，这时候需要确定比较的方式，一个比较好的思路是利用 "),a("code",[t._v("Equal")]),t._v(" 直接和符合条件的索引作比较，即 "),a("code",[t._v("Equal<{ [key in keyof T]: T[key] } , { readonly [Q]: T[Q] }>")])]),t._v(" "),a("li",[t._v("为了实现对泛型的每一项进行比较需要有两个前置工作 - 利用联合类型分发 "),a("code",[t._v("key")]),t._v("、通过 "),a("code",[t._v("Pick")]),t._v(" 提取当前 "),a("code",[t._v("key")]),t._v(" 的类型")]),t._v(" "),a("li",[t._v("利用联合类型分发 "),a("code",[t._v("key")]),t._v(" 要求联合类型 "),a("code",[t._v("key")]),t._v(" 约束为 "),a("code",[t._v("T")]),t._v(" 类型，即 "),a("code",[t._v("type GetReadonlyKeys<T, Key extends keyof T>")])]),t._v(" "),a("li",[a("code",[t._v("Pick<T, K>")]),t._v(" 会从类型 "),a("code",[t._v("T")]),t._v(" 中选择出属性 "),a("code",[t._v("K")]),t._v("，构造成一个新的类型，所以有 "),a("code",[t._v("Equal<Pick<T, K>, Readonly<Pick<T, K>>>")])]),t._v(" "),a("li",[t._v("结合上述分析得到 "),a("code",[t._v("type GetReadonlyKeys<T, K extends keyof T> = Equal<Pick<T, K>, Readonly<Pick<T, K>>> extends true ? K : never")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @description 获取只读`key`\n * @tips 1.利用联合类型分发`key`\n *       2.通过`Pick`提取当前`key`的类型\n *       3.通过`Equal`判断,只读与不只读是否一致\n */")]),t._v("\ntype GetReadonlyKeys"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" keyof "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("keyof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" Equal"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Pick"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Readonly"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Pick"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" never\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" never\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);