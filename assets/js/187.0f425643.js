(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{610:function(t,e,s){"use strict";s.r(e);var a=s(28),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"前置知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前置知识"}},[t._v("#")]),t._v(" 前置知识")]),t._v(" "),s("blockquote",[s("p",[t._v("今日 【easy - 7.readonly】、【middle - 3.omit】")])]),t._v(" "),s("p",[t._v("在这之前需要掌握一点Ts基础知识，可以参考学习记录"),s("RouterLink",{attrs:{to:"/Web/TypeScript/typescript1.html"}},[t._v("TypeScript学习记录-[数据类型]")]),t._v("、"),s("RouterLink",{attrs:{to:"/Web/TypeScript/typescript1.html"}},[t._v("TypeScript学习记录-[类和接口]")]),t._v("、"),s("RouterLink",{attrs:{to:"/Web/TypeScript/typescript1.html"}},[t._v("TypeScript学习记录-[枚举和泛型]")]),t._v("、"),s("RouterLink",{attrs:{to:"/Web/TypeScript/typescript1.html"}},[t._v("TypeScript学习记录-[类型别名]")])],1),t._v(" "),s("h1",{attrs:{id:"二、题目分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、题目分析"}},[t._v("#")]),t._v(" 二、题目分析")]),t._v(" "),s("h2",{attrs:{id:"_1-readonly"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-readonly"}},[t._v("#")]),t._v(" 1. readonly")]),t._v(" "),s("p",[s("strong",[t._v("Readonly 会接收一个泛型参数，并返回一个完全一样的类型，只是所有属性都会被 readonly 所修饰")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("type MyReadonly"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" any\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* _____________ 测试用例 _____________ */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" type "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Equal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Expect "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@type-challenges/utils'")]),t._v("\n\ntype cases "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  Expect"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Equal"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("MyReadonly"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Todo1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Readonly"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Todo1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Todo1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("title")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("description")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("completed")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" boolean\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("meta")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("author")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("首先可以确定的是返回类型是 "),s("code",[t._v("object")]),t._v("（索引类型index Type）， 且其属性都会被 "),s("code",[t._v("readonly")]),t._v("，即 "),s("code",[t._v("type MyReadonly<T> = { readonly key：value }")]),t._v("，且包含的键值对个数")]),t._v(" "),s("li",[s("code",[t._v("key")]),t._v(" 应循环取自泛型 "),s("code",[t._v("T")]),t._v(" 的索引，"),s("code",[t._v("value")]),t._v(" 应循环取自泛型 "),s("code",[t._v("T")]),t._v(" 的索引的值 "),s("code",[t._v("T[Key]")]),t._v("，需使用 "),s("code",[t._v("keyof T")]),t._v(" 查询索引类型中所有的索引，结合运算符 "),s("code",[t._v("in")]),t._v(" 进行遍历，从而得到 "),s("code",[t._v("type MyReadonly<T> = { readonly [k in keyof T]: T[k] }")])])]),t._v(" "),s("h2",{attrs:{id:"_2-omit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-omit"}},[t._v("#")]),t._v(" 2.Omit")]),t._v(" "),s("p",[s("strong",[t._v("不使用 Omit 实现 TypeScript 的 Omit<T, K> 泛型")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* _____________ Your Code Here _____________ */")]),t._v("\n\ntype MyOmit"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" any\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* _____________ Test Cases _____________ */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" type "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Equal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Expect "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@type-challenges/utils'")]),t._v("\n\ntype cases "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  Expect"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Equal"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Expected1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MyOmit"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Todo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'description'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Expect"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Equal"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Expected2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MyOmit"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Todo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'description'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'completed'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// @ts-expect-error")]),t._v("\ntype error "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MyOmit"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Todo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'description'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'invalid'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Todo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("title")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("description")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("completed")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" boolean\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Expected1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("title")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("completed")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" boolean\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Expected2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("title")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("首先可以确定的是返回类型是 "),s("code",[t._v("object")]),t._v("（索引类型index Type），且其属性均属于泛型 "),s("code",[t._v("T")]),t._v("，从而有 "),s("code",[t._v("type MyOmit<T, K> = { [key in keyof T]: T[key] }")])]),t._v(" "),s("li",[s("code",[t._v("k")]),t._v(" 中包含了需要排除的索引，即 "),s("code",[t._v("key in keyof K")]),t._v(" 可以写作 "),s("code",[t._v("key in keyof Keys")]),t._v(", 从而有 "),s("code",[t._v("type MyOmit<T, key in keyof Keys> = { [key in keyof T]: T[key] }")]),t._v("，不过这样就产生了两个遍历联合类型的 "),s("code",[t._v("in")]),t._v(" 运算，形成了嵌套判断。")]),t._v(" "),s("li",[t._v("这种情况下一般采用条件类型 "),s("code",[t._v("extends")]),t._v(" 运算符进行判断，即 "),s("code",[t._v("k extends keyof T")]),t._v("、"),s("code",[t._v("key extends k ? never : key")]),t._v("。其中第一个 "),s("code",[t._v("extends")]),t._v(" 结合 "),s("code",[t._v("keyof")]),t._v(" 使用可以约束 "),s("code",[t._v("K")]),t._v(" 的条件，即 "),s("code",[t._v("K")]),t._v(" 的联合项必须来自接口 "),s("code",[t._v("T")]),t._v(" 的属性否则 "),s("code",[t._v("Ts")]),t._v(" 就会报错，此时 "),s("code",[t._v("extends")]),t._v(" 通过推迟解析条件类型得到了一个联合类型；第二个 "),s("code",[t._v("extends")]),t._v(" 用作条件类型判断，逻辑是 "),s("code",[t._v("key")]),t._v(" 类型可被赋值于 "),s("code",[t._v("k")]),t._v(" 类型则被赋予 "),s("code",[t._v("never")]),t._v("（），否则赋予 "),s("code",[t._v("key")]),t._v(" 类型，从而排除掉泛型 "),s("code",[t._v("k")]),t._v(" 中的 "),s("code",[t._v("key")]),t._v(" 类型")]),t._v(" "),s("li",[t._v("结合上述分析，我们可以得到 "),s("code",[t._v("type MyOmit<T, Keys extends keyof T> = { [key in keyof T as key extends Keys ? never : key]: T[key] }")]),t._v("，需要注意的是这里使用到了重映射运算符 "),s("code",[t._v("as")]),t._v(" ，可以理解为前述中两个遍历联合类型的 "),s("code",[t._v("in")]),t._v(" 运算中的嵌套链接。")])])])}),[],!1,null,null,null);e.default=r.exports}}]);