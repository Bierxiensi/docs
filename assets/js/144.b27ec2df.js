(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{571:function(t,e,a){"use strict";a.r(e);var r=a(28),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("ul",[a("li",[a("code",[t._v("ArrayBuffer")]),t._v(" 对象用来表示通用的、固定长度的原始二进制数据缓冲区")]),t._v(" "),a("li",[t._v("某种程度上类似 C++的 "),a("code",[t._v("malloc")])]),t._v(" "),a("li",[t._v("不能直接操作 ArrayBuffer 的内容，而是要通过类型数组对象或 DataView 对象来操作")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("api")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("作用")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ArrayBuffer.isView(arg)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("如果参数是 ArrayBuffer 的视图实例则返回 true，例如 类型数组对象 或 DataView 对象；否则返回 false。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ArrayBuffer.transfer(oldBuffer [, newByteLength])")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回一个新的 ArrayBuffer 对象，其内容取自 oldBuffer 中的数据，并且根据 newByteLength 的大小对数据进行截取或补 0。")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nlength为要创建的 ArrayBuffer 的大小，单位为字节。\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);