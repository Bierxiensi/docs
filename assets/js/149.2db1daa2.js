(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{570:function(t,a,e){"use strict";e.r(a);var s=e(28),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("ul",[e("li",[t._v("FormData 接口提供了一种表示表单数据的键值对 "),e("code",[t._v("key/value")]),t._v(" 的构造方式")]),t._v(" "),e("li",[t._v("可以将数据通过 "),e("code",[t._v("XMLHttpRequest.send()")]),t._v(" 方法发送出去，如果送出时的编码类型被设为 "),e("code",[t._v('"multipart/form-data"')]),t._v("，它会使用和表单一样的格式")]),t._v(" "),e("li",[t._v("构建一个简单的 GET 请求，并且通过"),e("code",[t._v("<form>")]),t._v("的形式带有查询参数，可以将它直接传递给 "),e("code",[t._v("URLSearchParams")])]),t._v(" "),e("li",[t._v("与"),e("RouterLink",{attrs:{to:"/Web/JavaScript/Advance/URLSearchParams.html"}},[t._v("URLSearchParams")]),t._v("相同的是可以直接在"),e("code",[t._v("for...of")]),t._v("结构中使用，而不需要调用"),e("code",[t._v("entries()")])],1)]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" myFormData"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" myFormData"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("entries")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("api")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("作用")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("FormData.append()")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("向 FormData 中添加新的属性值，对应的属性值存在也不会覆盖原值，如果属性不存在则新增一项属性值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("FormData.delete()")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从 FormData 对象里面删除一个键值对")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("FormData.entries()")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("返回一个 iterator 可以遍历所有键/值对的对象")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("FormData.get()")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("返回在 FormData 对象中与给定键关联的第一个值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("FormData.getAll()")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("返回一个包含 FormData 对象中与给定键关联的所有值的数组")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("FormData.has()")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("返回一个布尔值表明 FormData 对象是否包含某些键")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("FormData.keys()")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("返回一个包含所有键的 iterator 对象")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("FormData.set()")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("给 FormData 设置属性值，如果 FormData 对应的属性值存在则覆盖原值，否则新增一项属性值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("FormData.values()")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("返回一个包含所有值的 iterator 对象")])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);